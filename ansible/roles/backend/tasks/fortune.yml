---
- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Register OS destribution
  debug: msg="{{ ansible_distribution }}"
  register: distro
  run_once: yes

- name: Set frontend proxy servers hosts file
  ansible.builtin.template:
    src: hosts_file.j2
    dest: /etc/hosts

- name: Install additional packages
  package:
    name:
      - python3-pip
    state: latest

- name: Uninstall packages
  package:
    name:
      - python3-requests
    state: absent

- name: Check whether a package called docker is installed
  ansible.builtin.debug:
    msg: "{{ ansible_facts.packages['docker-ce'] | length }} versions of docker-ce are installed!"
  register: check_package_docker
  ignore_errors: true
  run_once: true

- name: Stop Anaible execution is docker package is already present
  debug: msg="Docker package is already present, check if you really want to run this role!"
  failed_when:
    - '"1 versions of docker-ce are installed!" in check_package_docker.msg'
  run_once: yes

# Docker
- name: Install container engine
  block:
    - name: Install docker
      when: "distro.msg == 'Amazon'"
      block:
        - name: Add an docker signing key
          ansible.builtin.rpm_key:
            key: https://download.docker.com/linux/centos/gpg
            state: present

        - name: Add specified repository into sources list
          ansible.builtin.yum_repository:
            name: docker
            description: Docker CE Stable Repository
            baseurl: https://download.docker.com/linux/centos/{{ repo_distribution_major_version }}/$basearch/stable
            gpgcheck: 1
            gpgkey: https://download.docker.com/linux/centos/gpg
            enabled: 1

        - name: Create docker configuration directory
          file:
            path: /etc/docker
            state: directory
            mode: '0700'

        - name: Create docker containers directory
          file:
            path: /var/containers
            state: directory
            mode: '0700'

        - name: Creat docker log directory
          file:
            path: /var/log/docker
            state: directory
            owner: root
            group: root
            mode: '0700'

        - name: Install docker packages
          package:
            name: docker-ce
            state: present
            update_cache: yes
        
        - name: Install and upgrade packages
          pip:
            name:
              - docker=={{ pip_docker_version }}
            executable: pip3

        - name: Copy docker related configuration files
          copy:
            src: "{{ item.src }}"
            dest: "/etc/{{ item.dest }}"
            owner: root
            group: root
            mode: '0644'
          loop:
            - { src: 'docker/daemon.json', dest: 'docker/daemon.json' }
            - { src: 'docker/docker-logrotate.conf', dest: 'logrotate.d/docker.conf' }
            - { src: 'docker/docker-rsyslog.conf', dest: 'rsyslog.d/10-docker.conf' }
        
        - name: Start and enable services
          service:
            name: "{{ item }}"
            enabled: true
            state: started
          loop:
            - docker

- name: Reboot host
  reboot:
    connect_timeout: "{{ reboot_connect_timeout }}"
    post_reboot_delay: "{{ reboot_post_reboot_delay }}"
    reboot_timeout: "{{ reboot_timeout }}"

- name: Ensure the docker group exists
  ansible.builtin.group:
    name: docker
    state: present

- name: Add the user to the docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    group: docker
    append: yes

- name: Create directory tree if it does not exist
  ansible.builtin.file:
    path: "{{ container_dir }}/{{ item }}"
    state: directory
  with_items:
    - "fortune"

- name: Copy docker-compose configuration
  ansible.builtin.template:
    src: "docker-compose.j2"
    dest: "/srv/containers/docker-compose.yml"

- name: Copy files from source to destination
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ container_dir }}/{{ item.dest }}"
    remote_src: no
  loop:
    - { src: 'docker/containers/fortune/', dest: 'fortune/' }

- name: Create and start service containers
  community.docker.docker_compose_v2:
    project_src: /srv/containers
    services:
      - node-exporter
      - cadvisor
      - fortune
    state: present
    recreate: always
